/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventSubscription {
    #[serde(rename = "eventId", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<uuid::Uuid>,
    #[serde(rename = "billingPeriod", skip_serializing_if = "Option::is_none")]
    pub billing_period: Option<BillingPeriod>,
    #[serde(rename = "effectiveDate", skip_serializing_if = "Option::is_none")]
    pub effective_date: Option<String>,
    #[serde(rename = "catalogEffectiveDate", skip_serializing_if = "Option::is_none")]
    pub catalog_effective_date: Option<String>,
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<String>,
    #[serde(rename = "product", skip_serializing_if = "Option::is_none")]
    pub product: Option<String>,
    #[serde(rename = "priceList", skip_serializing_if = "Option::is_none")]
    pub price_list: Option<String>,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<EventType>,
    #[serde(rename = "isBlockedBilling", skip_serializing_if = "Option::is_none")]
    pub is_blocked_billing: Option<bool>,
    #[serde(rename = "isBlockedEntitlement", skip_serializing_if = "Option::is_none")]
    pub is_blocked_entitlement: Option<bool>,
    #[serde(rename = "serviceName", skip_serializing_if = "Option::is_none")]
    pub service_name: Option<String>,
    #[serde(rename = "serviceStateName", skip_serializing_if = "Option::is_none")]
    pub service_state_name: Option<String>,
    #[serde(rename = "phase", skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    #[serde(rename = "auditLogs", skip_serializing_if = "Option::is_none")]
    pub audit_logs: Option<Vec<models::AuditLog>>,
}

impl EventSubscription {
    pub fn new() -> EventSubscription {
        EventSubscription {
            event_id: None,
            billing_period: None,
            effective_date: None,
            catalog_effective_date: None,
            plan: None,
            product: None,
            price_list: None,
            event_type: None,
            is_blocked_billing: None,
            is_blocked_entitlement: None,
            service_name: None,
            service_state_name: None,
            phase: None,
            audit_logs: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingPeriod {
    #[serde(rename = "DAILY")]
    Daily,
    #[serde(rename = "WEEKLY")]
    Weekly,
    #[serde(rename = "BIWEEKLY")]
    Biweekly,
    #[serde(rename = "THIRTY_DAYS")]
    ThirtyDays,
    #[serde(rename = "THIRTY_ONE_DAYS")]
    ThirtyOneDays,
    #[serde(rename = "SIXTY_DAYS")]
    SixtyDays,
    #[serde(rename = "NINETY_DAYS")]
    NinetyDays,
    #[serde(rename = "MONTHLY")]
    Monthly,
    #[serde(rename = "BIMESTRIAL")]
    Bimestrial,
    #[serde(rename = "QUARTERLY")]
    Quarterly,
    #[serde(rename = "TRIANNUAL")]
    Triannual,
    #[serde(rename = "BIANNUAL")]
    Biannual,
    #[serde(rename = "ANNUAL")]
    Annual,
    #[serde(rename = "SESQUIENNIAL")]
    Sesquiennial,
    #[serde(rename = "BIENNIAL")]
    Biennial,
    #[serde(rename = "TRIENNIAL")]
    Triennial,
    #[serde(rename = "NO_BILLING_PERIOD")]
    NoBillingPeriod,
}

impl Default for BillingPeriod {
    fn default() -> BillingPeriod {
        Self::Daily
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "START_ENTITLEMENT")]
    StartEntitlement,
    #[serde(rename = "START_BILLING")]
    StartBilling,
    #[serde(rename = "PAUSE_ENTITLEMENT")]
    PauseEntitlement,
    #[serde(rename = "PAUSE_BILLING")]
    PauseBilling,
    #[serde(rename = "RESUME_ENTITLEMENT")]
    ResumeEntitlement,
    #[serde(rename = "RESUME_BILLING")]
    ResumeBilling,
    #[serde(rename = "PHASE")]
    Phase,
    #[serde(rename = "CHANGE")]
    Change,
    #[serde(rename = "STOP_ENTITLEMENT")]
    StopEntitlement,
    #[serde(rename = "STOP_BILLING")]
    StopBilling,
    #[serde(rename = "SERVICE_STATE_CHANGE")]
    ServiceStateChange,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::StartEntitlement
    }
}

