/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsagePrice {
    #[serde(rename = "usageName", skip_serializing_if = "Option::is_none")]
    pub usage_name: Option<String>,
    #[serde(rename = "usageType", skip_serializing_if = "Option::is_none")]
    pub usage_type: Option<UsageType>,
    #[serde(rename = "billingMode", skip_serializing_if = "Option::is_none")]
    pub billing_mode: Option<BillingMode>,
    #[serde(rename = "tierBlockPolicy", skip_serializing_if = "Option::is_none")]
    pub tier_block_policy: Option<TierBlockPolicy>,
    #[serde(rename = "tierPrices", skip_serializing_if = "Option::is_none")]
    pub tier_prices: Option<Vec<models::TierPrice>>,
}

impl UsagePrice {
    pub fn new() -> UsagePrice {
        UsagePrice {
            usage_name: None,
            usage_type: None,
            billing_mode: None,
            tier_block_policy: None,
            tier_prices: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UsageType {
    #[serde(rename = "CAPACITY")]
    Capacity,
    #[serde(rename = "CONSUMABLE")]
    Consumable,
}

impl Default for UsageType {
    fn default() -> UsageType {
        Self::Capacity
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingMode {
    #[serde(rename = "IN_ADVANCE")]
    Advance,
    #[serde(rename = "IN_ARREAR")]
    Arrear,
}

impl Default for BillingMode {
    fn default() -> BillingMode {
        Self::Advance
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TierBlockPolicy {
    #[serde(rename = "ALL_TIERS")]
    AllTiers,
    #[serde(rename = "TOP_TIER")]
    TopTier,
}

impl Default for TierBlockPolicy {
    fn default() -> TierBlockPolicy {
        Self::AllTiers
    }
}

