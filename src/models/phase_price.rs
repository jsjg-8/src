/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PhasePrice {
    #[serde(rename = "planName", skip_serializing_if = "Option::is_none")]
    pub plan_name: Option<String>,
    #[serde(rename = "phaseName", skip_serializing_if = "Option::is_none")]
    pub phase_name: Option<String>,
    #[serde(rename = "phaseType", skip_serializing_if = "Option::is_none")]
    pub phase_type: Option<String>,
    #[serde(rename = "fixedPrice", skip_serializing_if = "Option::is_none")]
    pub fixed_price: Option<f64>,
    #[serde(rename = "recurringPrice", skip_serializing_if = "Option::is_none")]
    pub recurring_price: Option<f64>,
    #[serde(rename = "usagePrices", skip_serializing_if = "Option::is_none")]
    pub usage_prices: Option<Vec<models::UsagePrice>>,
}

impl PhasePrice {
    pub fn new() -> PhasePrice {
        PhasePrice {
            plan_name: None,
            phase_name: None,
            phase_type: None,
            fixed_price: None,
            recurring_price: None,
            usage_prices: None,
        }
    }
}

