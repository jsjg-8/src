/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Product {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "prettyName", skip_serializing_if = "Option::is_none")]
    pub pretty_name: Option<String>,
    #[serde(rename = "plans", skip_serializing_if = "Option::is_none")]
    pub plans: Option<Vec<models::Plan>>,
    #[serde(rename = "included", skip_serializing_if = "Option::is_none")]
    pub included: Option<Vec<String>>,
    #[serde(rename = "available", skip_serializing_if = "Option::is_none")]
    pub available: Option<Vec<String>>,
}

impl Product {
    pub fn new() -> Product {
        Product {
            r#type: None,
            name: None,
            pretty_name: None,
            plans: None,
            included: None,
            available: None,
        }
    }
}

