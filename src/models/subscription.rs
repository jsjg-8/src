/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subscription {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<uuid::Uuid>,
    #[serde(rename = "bundleId", skip_serializing_if = "Option::is_none")]
    pub bundle_id: Option<uuid::Uuid>,
    #[serde(rename = "bundleExternalKey", skip_serializing_if = "Option::is_none")]
    pub bundle_external_key: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<uuid::Uuid>,
    #[serde(rename = "externalKey", skip_serializing_if = "Option::is_none")]
    pub external_key: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "productName")]
    pub product_name: String,
    #[serde(rename = "productCategory", skip_serializing_if = "Option::is_none")]
    pub product_category: Option<ProductCategory>,
    #[serde(rename = "billingPeriod")]
    pub billing_period: BillingPeriod,
    #[serde(rename = "phaseType", skip_serializing_if = "Option::is_none")]
    pub phase_type: Option<PhaseType>,
    #[serde(rename = "priceList")]
    pub price_list: String,
    #[serde(rename = "planName")]
    pub plan_name: String,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "sourceType", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<SourceType>,
    #[serde(rename = "cancelledDate", skip_serializing_if = "Option::is_none")]
    pub cancelled_date: Option<String>,
    #[serde(rename = "chargedThroughDate", skip_serializing_if = "Option::is_none")]
    pub charged_through_date: Option<String>,
    #[serde(rename = "billingStartDate", skip_serializing_if = "Option::is_none")]
    pub billing_start_date: Option<String>,
    #[serde(rename = "billingEndDate", skip_serializing_if = "Option::is_none")]
    pub billing_end_date: Option<String>,
    #[serde(rename = "billCycleDayLocal", skip_serializing_if = "Option::is_none")]
    pub bill_cycle_day_local: Option<i32>,
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<models::EventSubscription>>,
    #[serde(rename = "priceOverrides", skip_serializing_if = "Option::is_none")]
    pub price_overrides: Option<Vec<models::PhasePrice>>,
    #[serde(rename = "prices", skip_serializing_if = "Option::is_none")]
    pub prices: Option<Vec<models::PhasePrice>>,
    #[serde(rename = "auditLogs", skip_serializing_if = "Option::is_none")]
    pub audit_logs: Option<Vec<models::AuditLog>>,
}

impl Subscription {
    pub fn new(product_name: String, billing_period: BillingPeriod, price_list: String, plan_name: String) -> Subscription {
        Subscription {
            account_id: None,
            bundle_id: None,
            bundle_external_key: None,
            subscription_id: None,
            external_key: None,
            start_date: None,
            product_name,
            product_category: None,
            billing_period,
            phase_type: None,
            price_list,
            plan_name,
            state: None,
            source_type: None,
            cancelled_date: None,
            charged_through_date: None,
            billing_start_date: None,
            billing_end_date: None,
            bill_cycle_day_local: None,
            quantity: None,
            events: None,
            price_overrides: None,
            prices: None,
            audit_logs: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductCategory {
    #[serde(rename = "BASE")]
    Base,
    #[serde(rename = "ADD_ON")]
    AddOn,
    #[serde(rename = "STANDALONE")]
    Standalone,
}

impl Default for ProductCategory {
    fn default() -> ProductCategory {
        Self::Base
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingPeriod {
    #[serde(rename = "DAILY")]
    Daily,
    #[serde(rename = "WEEKLY")]
    Weekly,
    #[serde(rename = "BIWEEKLY")]
    Biweekly,
    #[serde(rename = "THIRTY_DAYS")]
    ThirtyDays,
    #[serde(rename = "THIRTY_ONE_DAYS")]
    ThirtyOneDays,
    #[serde(rename = "SIXTY_DAYS")]
    SixtyDays,
    #[serde(rename = "NINETY_DAYS")]
    NinetyDays,
    #[serde(rename = "MONTHLY")]
    Monthly,
    #[serde(rename = "BIMESTRIAL")]
    Bimestrial,
    #[serde(rename = "QUARTERLY")]
    Quarterly,
    #[serde(rename = "TRIANNUAL")]
    Triannual,
    #[serde(rename = "BIANNUAL")]
    Biannual,
    #[serde(rename = "ANNUAL")]
    Annual,
    #[serde(rename = "SESQUIENNIAL")]
    Sesquiennial,
    #[serde(rename = "BIENNIAL")]
    Biennial,
    #[serde(rename = "TRIENNIAL")]
    Triennial,
    #[serde(rename = "NO_BILLING_PERIOD")]
    NoBillingPeriod,
}

impl Default for BillingPeriod {
    fn default() -> BillingPeriod {
        Self::Daily
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PhaseType {
    #[serde(rename = "TRIAL")]
    Trial,
    #[serde(rename = "DISCOUNT")]
    Discount,
    #[serde(rename = "FIXEDTERM")]
    Fixedterm,
    #[serde(rename = "EVERGREEN")]
    Evergreen,
}

impl Default for PhaseType {
    fn default() -> PhaseType {
        Self::Trial
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "BLOCKED")]
    Blocked,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "EXPIRED")]
    Expired,
}

impl Default for State {
    fn default() -> State {
        Self::Pending
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourceType {
    #[serde(rename = "NATIVE")]
    Native,
    #[serde(rename = "MIGRATED")]
    Migrated,
    #[serde(rename = "TRANSFERRED")]
    Transferred,
}

impl Default for SourceType {
    fn default() -> SourceType {
        Self::Native
    }
}

