/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceDryRun {
    #[serde(rename = "dryRunType", skip_serializing_if = "Option::is_none")]
    pub dry_run_type: Option<DryRunType>,
    #[serde(rename = "dryRunAction", skip_serializing_if = "Option::is_none")]
    pub dry_run_action: Option<DryRunAction>,
    #[serde(rename = "phaseType", skip_serializing_if = "Option::is_none")]
    pub phase_type: Option<PhaseType>,
    #[serde(rename = "productName", skip_serializing_if = "Option::is_none")]
    pub product_name: Option<String>,
    #[serde(rename = "productCategory", skip_serializing_if = "Option::is_none")]
    pub product_category: Option<ProductCategory>,
    #[serde(rename = "billingPeriod", skip_serializing_if = "Option::is_none")]
    pub billing_period: Option<BillingPeriod>,
    #[serde(rename = "priceListName", skip_serializing_if = "Option::is_none")]
    pub price_list_name: Option<String>,
    #[serde(rename = "subscriptionId", skip_serializing_if = "Option::is_none")]
    pub subscription_id: Option<uuid::Uuid>,
    #[serde(rename = "bundleId", skip_serializing_if = "Option::is_none")]
    pub bundle_id: Option<uuid::Uuid>,
    #[serde(rename = "effectiveDate", skip_serializing_if = "Option::is_none")]
    pub effective_date: Option<String>,
    #[serde(rename = "billingPolicy", skip_serializing_if = "Option::is_none")]
    pub billing_policy: Option<BillingPolicy>,
    #[serde(rename = "priceOverrides", skip_serializing_if = "Option::is_none")]
    pub price_overrides: Option<Vec<models::PhasePrice>>,
    #[serde(rename = "planName", skip_serializing_if = "Option::is_none")]
    pub plan_name: Option<String>,
}

impl InvoiceDryRun {
    pub fn new() -> InvoiceDryRun {
        InvoiceDryRun {
            dry_run_type: None,
            dry_run_action: None,
            phase_type: None,
            product_name: None,
            product_category: None,
            billing_period: None,
            price_list_name: None,
            subscription_id: None,
            bundle_id: None,
            effective_date: None,
            billing_policy: None,
            price_overrides: None,
            plan_name: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DryRunType {
    #[serde(rename = "TARGET_DATE")]
    TargetDate,
    #[serde(rename = "UPCOMING_INVOICE")]
    UpcomingInvoice,
    #[serde(rename = "SUBSCRIPTION_ACTION")]
    SubscriptionAction,
}

impl Default for DryRunType {
    fn default() -> DryRunType {
        Self::TargetDate
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DryRunAction {
    #[serde(rename = "START_ENTITLEMENT")]
    StartEntitlement,
    #[serde(rename = "START_BILLING")]
    StartBilling,
    #[serde(rename = "PAUSE_ENTITLEMENT")]
    PauseEntitlement,
    #[serde(rename = "PAUSE_BILLING")]
    PauseBilling,
    #[serde(rename = "RESUME_ENTITLEMENT")]
    ResumeEntitlement,
    #[serde(rename = "RESUME_BILLING")]
    ResumeBilling,
    #[serde(rename = "PHASE")]
    Phase,
    #[serde(rename = "CHANGE")]
    Change,
    #[serde(rename = "STOP_ENTITLEMENT")]
    StopEntitlement,
    #[serde(rename = "STOP_BILLING")]
    StopBilling,
    #[serde(rename = "SERVICE_STATE_CHANGE")]
    ServiceStateChange,
}

impl Default for DryRunAction {
    fn default() -> DryRunAction {
        Self::StartEntitlement
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PhaseType {
    #[serde(rename = "TRIAL")]
    Trial,
    #[serde(rename = "DISCOUNT")]
    Discount,
    #[serde(rename = "FIXEDTERM")]
    Fixedterm,
    #[serde(rename = "EVERGREEN")]
    Evergreen,
}

impl Default for PhaseType {
    fn default() -> PhaseType {
        Self::Trial
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProductCategory {
    #[serde(rename = "BASE")]
    Base,
    #[serde(rename = "ADD_ON")]
    AddOn,
    #[serde(rename = "STANDALONE")]
    Standalone,
}

impl Default for ProductCategory {
    fn default() -> ProductCategory {
        Self::Base
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingPeriod {
    #[serde(rename = "DAILY")]
    Daily,
    #[serde(rename = "WEEKLY")]
    Weekly,
    #[serde(rename = "BIWEEKLY")]
    Biweekly,
    #[serde(rename = "THIRTY_DAYS")]
    ThirtyDays,
    #[serde(rename = "THIRTY_ONE_DAYS")]
    ThirtyOneDays,
    #[serde(rename = "SIXTY_DAYS")]
    SixtyDays,
    #[serde(rename = "NINETY_DAYS")]
    NinetyDays,
    #[serde(rename = "MONTHLY")]
    Monthly,
    #[serde(rename = "BIMESTRIAL")]
    Bimestrial,
    #[serde(rename = "QUARTERLY")]
    Quarterly,
    #[serde(rename = "TRIANNUAL")]
    Triannual,
    #[serde(rename = "BIANNUAL")]
    Biannual,
    #[serde(rename = "ANNUAL")]
    Annual,
    #[serde(rename = "SESQUIENNIAL")]
    Sesquiennial,
    #[serde(rename = "BIENNIAL")]
    Biennial,
    #[serde(rename = "TRIENNIAL")]
    Triennial,
    #[serde(rename = "NO_BILLING_PERIOD")]
    NoBillingPeriod,
}

impl Default for BillingPeriod {
    fn default() -> BillingPeriod {
        Self::Daily
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BillingPolicy {
    #[serde(rename = "START_OF_TERM")]
    StartOfTerm,
    #[serde(rename = "END_OF_TERM")]
    EndOfTerm,
    #[serde(rename = "IMMEDIATE")]
    Immediate,
    #[serde(rename = "ILLEGAL")]
    Illegal,
}

impl Default for BillingPolicy {
    fn default() -> BillingPolicy {
        Self::StartOfTerm
    }
}

