/*
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockingState {
    #[serde(rename = "blockedId", skip_serializing_if = "Option::is_none")]
    pub blocked_id: Option<uuid::Uuid>,
    #[serde(rename = "stateName", skip_serializing_if = "Option::is_none")]
    pub state_name: Option<String>,
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(rename = "isBlockChange", skip_serializing_if = "Option::is_none")]
    pub is_block_change: Option<bool>,
    #[serde(rename = "isBlockEntitlement", skip_serializing_if = "Option::is_none")]
    pub is_block_entitlement: Option<bool>,
    #[serde(rename = "isBlockBilling", skip_serializing_if = "Option::is_none")]
    pub is_block_billing: Option<bool>,
    #[serde(rename = "effectiveDate", skip_serializing_if = "Option::is_none")]
    pub effective_date: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "auditLogs", skip_serializing_if = "Option::is_none")]
    pub audit_logs: Option<Vec<models::AuditLog>>,
}

impl BlockingState {
    pub fn new() -> BlockingState {
        BlockingState {
            blocked_id: None,
            state_name: None,
            service: None,
            is_block_change: None,
            is_block_entitlement: None,
            is_block_billing: None,
            effective_date: None,
            r#type: None,
            audit_logs: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SUBSCRIPTION")]
    Subscription,
    #[serde(rename = "SUBSCRIPTION_BUNDLE")]
    SubscriptionBundle,
    #[serde(rename = "ACCOUNT")]
    Account,
}

impl Default for Type {
    fn default() -> Type {
        Self::Subscription
    }
}

